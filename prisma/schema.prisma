// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Şube Yönetimi
model Branch {
  id            String    @id @default(cuid())
  name          String
  code          String    @unique // Şube kodu (örn: IST-001, ANK-002)
  address       String
  phone         String
  email         String?
  managerId     String?
  isActive      Boolean   @default(true)
  timezone      String    @default("Europe/Istanbul")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // İlişkiler
  users         User[]
  patients      Patient[]
  appointments  Appointment[]
  treatments    Treatment[]
  invoices      Invoice[]
  inventory     Inventory[]
  manager       User?     @relation("BranchManager", fields: [managerId], references: [id])

  @@map("branches")
}

// Kullanıcı ve Kimlik Doğrulama
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          UserRole  @default(STAFF)
  branchId      String
  phone         String?
  avatar        String?
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // İlişkiler
  branch        Branch    @relation(fields: [branchId], references: [id])
  managedBranch Branch?   @relation("BranchManager")
  appointments  Appointment[]
  treatments    Treatment[]
  invoices      Invoice[]
  notes         Note[]

  @@map("users")
}

enum UserRole {
  SUPER_ADMIN    // Merkezi yönetim
  BRANCH_MANAGER // Şube müdürü
  DOCTOR         // Doktor
  STAFF          // Personel
  RECEPTIONIST   // Resepsiyon
  ACCOUNTANT     // Muhasebeci
}

// Hasta Yönetimi
model Patient {
  id            String    @id @default(cuid())
  branchId      String
  firstName     String
  lastName      String
  email         String?   @unique
  phone         String
  dateOfBirth   DateTime?
  gender        Gender?
  address       String?
  emergencyContact String?
  emergencyPhone String?
  medicalHistory String?
  allergies     String?
  insurance     String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // İlişkiler
  branch        Branch    @relation(fields: [branchId], references: [id])
  appointments  Appointment[]
  treatments    Treatment[]
  invoices      Invoice[]
  notes         Note[]
  documents     Document[]

  @@map("patients")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

// Randevu Yönetimi
model Appointment {
  id            String    @id @default(cuid())
  branchId      String
  patientId     String
  doctorId      String
  date          DateTime
  duration      Int       // dakika cinsinden
  status        AppointmentStatus @default(SCHEDULED)
  type          AppointmentType
  notes         String?
  reminderSent  Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // İlişkiler
  branch        Branch    @relation(fields: [branchId], references: [id])
  patient       Patient   @relation(fields: [patientId], references: [id])
  doctor        User      @relation(fields: [doctorId], references: [id])
  treatments    Treatment[]

  @@map("appointments")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AppointmentType {
  CONSULTATION
  TREATMENT
  CLEANING
  EMERGENCY
  FOLLOW_UP
  SURGERY
}

// Tedavi Yönetimi
model Treatment {
  id            String    @id @default(cuid())
  branchId      String
  patientId     String
  doctorId      String
  appointmentId String?
  name          String
  description   String?
  type          TreatmentType
  status        TreatmentStatus @default(PLANNED)
  startDate     DateTime?
  endDate       DateTime?
  cost          Decimal   @db.Decimal(10, 2)
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // İlişkiler
  branch        Branch    @relation(fields: [branchId], references: [id])
  patient       Patient   @relation(fields: [patientId], references: [id])
  doctor        User      @relation(fields: [doctorId], references: [id])
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  invoices      Invoice[]

  @@map("treatments")
}

enum TreatmentType {
  CLEANING
  FILLING
  EXTRACTION
  ROOT_CANAL
  CROWN
  BRIDGE
  IMPLANT
  ORTHODONTICS
  SURGERY
  CONSULTATION
}

enum TreatmentStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Fatura ve Ödeme Yönetimi
model Invoice {
  id            String    @id @default(cuid())
  branchId      String
  patientId     String
  doctorId      String
  treatmentId   String?
  invoiceNumber String    @unique
  amount        Decimal   @db.Decimal(10, 2)
  tax           Decimal   @db.Decimal(10, 2) @default(0)
  total         Decimal   @db.Decimal(10, 2)
  status        InvoiceStatus @default(PENDING)
  dueDate       DateTime?
  paidDate      DateTime?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // İlişkiler
  branch        Branch    @relation(fields: [branchId], references: [id])
  patient       Patient   @relation(fields: [patientId], references: [id])
  doctor        User      @relation(fields: [doctorId], references: [id])
  treatment     Treatment? @relation(fields: [treatmentId], references: [id])
  payments      Payment[]

  @@map("invoices")
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  PARTIAL
}

// Ödeme Takibi
model Payment {
  id            String    @id @default(cuid())
  invoiceId     String
  amount        Decimal   @db.Decimal(10, 2)
  method        PaymentMethod
  reference     String?
  notes         String?
  createdAt     DateTime  @default(now())

  // İlişkiler
  invoice       Invoice   @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  INSURANCE
  CHECK
}

// Notlar ve Dokümanlar
model Note {
  id            String    @id @default(cuid())
  branchId      String
  patientId     String?
  doctorId      String
  title         String
  content       String
  type          NoteType
  isPrivate     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // İlişkiler
  branch        Branch    @relation(fields: [branchId], references: [id])
  patient       Patient?  @relation(fields: [patientId], references: [id])
  doctor        User      @relation(fields: [doctorId], references: [id])

  @@map("notes")
}

enum NoteType {
  PATIENT_NOTE
  TREATMENT_NOTE
  GENERAL_NOTE
  REMINDER
}

// Doküman Yönetimi
model Document {
  id            String    @id @default(cuid())
  branchId      String
  patientId     String
  name          String
  type          DocumentType
  filePath      String
  fileSize      Int
  mimeType      String
  uploadedBy    String
  createdAt     DateTime  @default(now())

  // İlişkiler
  branch        Branch    @relation(fields: [branchId], references: [id])
  patient       Patient   @relation(fields: [patientId], references: [id])

  @@map("documents")
}

enum DocumentType {
  XRAY
  PHOTO
  REPORT
  CONSENT_FORM
  MEDICAL_RECORD
  INSURANCE_DOCUMENT
  OTHER
}

// Stok Yönetimi
model Inventory {
  id            String    @id @default(cuid())
  branchId      String
  name          String
  description   String?
  category      String
  unit          String
  quantity      Int
  minQuantity   Int       @default(0)
  cost          Decimal   @db.Decimal(10, 2)
  supplier      String?
  expiryDate    DateTime?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // İlişkiler
  branch        Branch    @relation(fields: [branchId], references: [id])

  @@map("inventory")
}

// Tedarikçi Yönetimi
model Supplier {
  id            String    @id @default(cuid())
  name          String
  contactPerson String?
  email         String?
  phone         String?
  address       String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("suppliers")
}

// Sistem Ayarları
model SystemSettings {
  id            String    @id @default(cuid())
  key           String    @unique
  value         String
  description   String?
  updatedAt     DateTime  @updatedAt

  @@map("system_settings")
}

// Aktivite Logları
model ActivityLog {
  id            String    @id @default(cuid())
  branchId      String?
  userId        String?
  action        String
  entityType    String
  entityId      String?
  details       String?
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime  @default(now())

  // İlişkiler
  branch        Branch?   @relation(fields: [branchId], references: [id])
  user          User?     @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}
